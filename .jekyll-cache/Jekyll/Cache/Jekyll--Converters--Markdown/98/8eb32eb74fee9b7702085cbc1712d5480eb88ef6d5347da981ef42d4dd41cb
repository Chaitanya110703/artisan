I"»4<p>Artisan supports by now many Yoctopuce devices. Most prominently the Yocto Thermocouple and the Yocto PT100. Both connect directly via USB and do not need the installation of any additional driver.</p>

<p>Artisan can access Yoctopuce devices connected to a <a href="https://www.yoctopuce.com/EN/virtualhub.php">VirtualHub</a> from remote via a network connection, via the <a href="https://www.yoctopuce.com/EN/products/extensions-and-networking/yoctohub-ethernet">YoctoHub-Ethernet</a>, a <a href="https://www.yoctopuce.com/EN/products/extensions-and-networking/yoctohub-wireless-n">YoctoHub-Wireless</a> hub or any other <a href="http://www.yoctopuce.com/EN/products/category/extensions-and-networking">Yoctopuce networking extension</a>. Just enter the IP address of the virtual hub under menu <code class="language-plaintext highlighter-rouge">Config &gt;&gt; Device, Yoctopuce tab</code>.</p>

<p>Yoctopuce devices can be configured and tested using the <a href="https://www.yoctopuce.com/EN/virtualhub.php">VirtualHub</a>.</p>

<h2 id="yocto-thermocouple"><a href="http://www.yoctopuce.com/EN/products/usb-environmental-sensors/yocto-thermocouple">Yocto Thermocouple</a></h2>

<p>The Yocto Thermocouple offers two TC inputs supporting  J, K, E, N, R, S and T type thermocouples.</p>

<h2 id="yocto-pt100"><a href="http://www.yoctopuce.com/EN/products/usb-environmental-sensors/yocto-pt100">Yocto PT100</a></h2>

<p>The Yocto-PT100 can be used with PT100 probes using 2, 3 or 4 wires. The type of connection is setup in software. To reach the highest precision, a 4-wires probe should be used. 3-wires probes are reasonably precise and not too much affected by wire lengths, contrarily to 2-wires probes which are the least precise and very sensitive to wire length.</p>

<p>The Yocto-PT100 features a built-in galvanic isolation between the USB control part and the PT100 measure circuit. It is therefore possible to use non-isolated PT100 probes, which are often more reactive and less expensive.</p>

<h2 id="yoctopuce-temperature-ir"><a href="http://www.yoctopuce.com/EN/products/category/usb-environmental-sensors">Yoctopuce Temperature IR</a></h2>

<p>The Yocto IR module features an infrared sensor and communicates as all other Yocto modules via a fast USB connection. The Emissivity factor of the material observed can be configured for this sensor under menu <code class="language-plaintext highlighter-rouge">Config &gt;&gt; Device</code>, in the <code class="language-plaintext highlighter-rouge">Yoctopuce</code> tab.</p>

<h2 id="yoctopuce-meteo"><a href="http://www.yoctopuce.com/EN/products/usb-environmental-sensors/yocto-meteo-v2">Yoctopuce Meteo</a></h2>

<p>The Yocto Meteo board adds ambient data (temperature, pressure and humidity) automatically to each roast profile. Set the correct MASL for your location under menu ConfigÂ Â» Device, Ambient tab and select this sensor from the popups.</p>

<h2 id="yoctopuce-4-20ma-rx"><a href="https://www.yoctopuce.com/EN/products/usb-electrical-sensors/yocto-4-20ma-rx">Yoctopuce 4-20mA-Rx</a></h2>

<p>The two channel Yocto-4-20mA-Rx device lets you read values returned by any industrial sensor following the 4-20mA standard. Artisan usess the Yoctopuce GenericSensor API to fetch data from this device.</p>

<h2 id="yoctopuce-yocto-serial"><a href="https://www.yoctopuce.com/EN/products/usb-electrical-interfaces/yocto-serial">Yoctopuce Yocto-Serial</a></h2>

<p>The Yocto-Serial module can autonomously interpret serial data coming from any external serial board. Artisan usess the Yoctopuce GenericSensor API to fetch data from this device.</p>

<h2 id="yoctopuce-millivolt-rx"><a href="https://www.yoctopuce.com/EN/products/usb-electrical-sensors/yocto-millivolt-rx">Yoctopuce milliVolt-Rx</a></h2>

<p>The miliVolt-Rx module lets you measure by USB very small voltages (down to a few dozen of microVolts, and up to 2V max), even when they are generated by extremely weak sources (very high impedance). Artisan usess the Yoctopuce GenericSensor API to fetch data from this device.</p>

<h2 id="yoctopuce-0-10v-rx"><a href="https://www.yoctopuce.com/EN/products/usb-electrical-sensors/yocto-0-10v-rx">Yoctopuce 0-10V-Rx</a></h2>

<p>The Yocto-0-10V-Rx module lets you read via USB the instant value returned by any industrial sensor following the 0-10V standard.q Artisan usess the Yoctopuce GenericSensor API to fetch data from this device.</p>

<h2 id="yoctopuce-0-10v-tx"><a href="https://www.yoctopuce.com/EN/products/usb-electrical-interfaces/yocto-0-10v-tx">Yoctopuce 0-10V-Tx</a></h2>

<p><em>(support for this module is available in Artisan v2.4.0 and later)</em></p>

<p>The Yocto-0-10V-Tx is a USB device with two channels that can generate independent voltages between 0 and 10V, e.g. to control modulating gas valves.</p>

<p>This Yoctopuce output can be activated via <code class="language-plaintext highlighter-rouge">VOUT Command</code> actions triggered by buttons or sliders configured in the Events tab (menu <code class="language-plaintext highlighter-rouge">Config &gt;&gt; Events</code>). The following command is supported to set the output voltage of a connected module:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">vout(c,v[,sn])</code> : with<br />
<code class="language-plaintext highlighter-rouge">c</code> the channel (1 or 2),<br />
<code class="language-plaintext highlighter-rouge">v</code> the voltage [0.0-10.0] in V, and the optional argument<br />
<code class="language-plaintext highlighter-rouge">sn</code> which specifies either the modules serial number or its logical name (if <code class="language-plaintext highlighter-rouge">sn</code> is not given, the first module/channel found is addressed).</li>
</ul>

<h2 id="yoctopuce-4-20ma-tx"><a href="https://www.yoctopuce.com/EN/products/usb-electrical-interfaces/yocto-4-20ma-tx">Yoctopuce 4-20mA-Tx</a></h2>

<p><em>(support for this module is available in Artisan v2.4.0 and later)</em></p>

<p>The Yocto-4-20mA-Tx is a USB 4-20mA signal generator, e.g. to control a modulating gas valve.</p>

<p>This Yoctopuce output can be activated via <code class="language-plaintext highlighter-rouge">VOUT Command</code> actions triggered by buttons or sliders configured in the Events tab (menu <code class="language-plaintext highlighter-rouge">Config &gt;&gt; Events</code>). The following command is supported to set the output current of a connected module:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">cout(c[,sn])</code> : with<br />
<code class="language-plaintext highlighter-rouge">c</code> the current [3.0-21.0] in mA, and the optional argument<br />
<code class="language-plaintext highlighter-rouge">sn</code> which specifies either the modules serial number or its logical name (if <code class="language-plaintext highlighter-rouge">sn</code> is not given, the first module found is addressed).</li>
</ul>

<h2 id="yoctopuce-pwm-tx"><a href="https://www.yoctopuce.com/EN/products/usb-electrical-interfaces/yocto-pwm-tx">Yoctopuce PWM-Tx</a></h2>

<p><em>(support for this module is available in Artisan v2.4.0 and later)</em></p>

<p>The Yoctopuce PWM module can be controlled via <code class="language-plaintext highlighter-rouge">PWM Command</code> actions triggered by buttons or sliders configured in the Events tab (menu <code class="language-plaintext highlighter-rouge">Config &gt;&gt; Events</code>).</p>

<p>The supported commands are:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">enabled(c,b[,sn])</code> : PWM running state</li>
  <li><code class="language-plaintext highlighter-rouge">freq(c,f[,sn])</code> : PWM frequency</li>
  <li><code class="language-plaintext highlighter-rouge">duty(c,d[,sn])</code> : PWM period</li>
  <li><code class="language-plaintext highlighter-rouge">move(c,d,t[,sn])</code> : changes progressively the PWM to the specified value over the given time interval</li>
</ul>

<p>with</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">c</code> : the channel (1 or 2)</li>
  <li><code class="language-plaintext highlighter-rouge">b</code> : a bool given as 0, 1, False or True</li>
  <li><code class="language-plaintext highlighter-rouge">f</code> : the frequency in Hz as an integer [0-1000000]</li>
  <li><code class="language-plaintext highlighter-rouge">d</code> : the duty cycle in % as a float [0.0-100.0]</li>
  <li><code class="language-plaintext highlighter-rouge">t</code> : the time as an integer in milliseconds</li>
  <li><code class="language-plaintext highlighter-rouge">sn</code> : the modules serial number or its logical name</li>
</ul>

<h2 id="yoctopuce-relays">Yoctopuce Relays</h2>

<p><em>(support for these modules is available in Artisan v2.4.0 and later)</em></p>

<p>The following Yoctopuce relays can be controlled via <code class="language-plaintext highlighter-rouge">IO Command</code> actions triggered by buttons configured in the Events tab (menu <code class="language-plaintext highlighter-rouge">Config &gt;&gt; Events</code>).</p>

<ul>
  <li><a href="https://www.yoctopuce.com/EN/products/usb-actuators/yocto-relay">Yocto-Relay</a>: 2x Unipolar Relay, 60VDC, 30VAC r.m.s., 2A</li>
  <li><a href="https://www.yoctopuce.com/EN/products/usb-actuators/yocto-latchedrelay">Yocto-LatchedRelay</a>: 1x Latched Relay, 60VDC, 8A</li>
  <li><a href="https://www.yoctopuce.com/EN/products/usb-actuators/yocto-maxicoupler-v2">Yocto-MaxiCoupler-V2</a>: 8x SSR, 48VDC or 30VAC r.m.s., 1.3A</li>
  <li><a href="https://www.yoctopuce.com/EN/products/usb-actuators/yocto-powerrelay-v2">Yocto-PowerRelay-V2</a>: 1x relay, 150VAC r.m.s., 5A</li>
  <li><a href="https://www.yoctopuce.com/EN/products/usb-actuators/yocto-powerrelay-v3">Yocto-PowerRelay-V3</a>: 1x relay, 250VAC r.m.s., 5A</li>
  <li><a href="https://www.yoctopuce.com/EN/products/usb-actuators/yocto-maxipowerrelay">Yocto-MaxiPowerRelay</a>: 5x relay, 250VAC r.m.s., 5A</li>
</ul>

<p>The supported commands are:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">on(c[,sn])</code> : turn channel c of the relay module on</li>
  <li><code class="language-plaintext highlighter-rouge">off(c[,sn])</code> : turn channel c of the relay module off</li>
  <li><code class="language-plaintext highlighter-rouge">flip(c[,sn])</code> : toggle the state of channel c</li>
  <li><code class="language-plaintext highlighter-rouge">pip(c,delay,duration[,sn])</code> : pulse the channel c on after a delay of <code class="language-plaintext highlighter-rouge">delay</code> milliseconds for the duration of <code class="language-plaintext highlighter-rouge">duration</code> milliseconds</li>
</ul>

<p>The optional <code class="language-plaintext highlighter-rouge">sn</code> parameter specifies either the modules serial number or its logical name (if <code class="language-plaintext highlighter-rouge">sn</code> is not given, the first module found is addressed).</p>

<h2 id="yoctopuce-servo"><a href="https://www.yoctopuce.com/EN/products/usb-actuators/yocto-servo">Yoctopuce Servo</a></h2>

<p><em>(support for this module is available in Artisan v2.4.0 and later)</em></p>

<p>The Yoctopuce servo module can be controlled via <code class="language-plaintext highlighter-rouge">RC Command</code> actions triggered by buttons or sliders configured in the Events tab (menu <code class="language-plaintext highlighter-rouge">Config &gt;&gt; Events</code>).</p>

<p>The supported commands are:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">enabled(c,b[,sn])</code> : enable/disable channel <code class="language-plaintext highlighter-rouge">c</code> of the servo module with <code class="language-plaintext highlighter-rouge">b</code> a boolean given as <code class="language-plaintext highlighter-rouge">0</code> or <code class="language-plaintext highlighter-rouge">1</code> or <code class="language-plaintext highlighter-rouge">False</code> or <code class="language-plaintext highlighter-rouge">True</code></li>
  <li><code class="language-plaintext highlighter-rouge">move(c,p[,t][,sn])</code> : move the servo connected on channel <code class="language-plaintext highlighter-rouge">c</code> to position <code class="language-plaintext highlighter-rouge">p</code>. The optional <code class="language-plaintext highlighter-rouge">t</code> gives the time in ms to arrive at the destination. If not given the servo moves as fast as possible.</li>
  <li><code class="language-plaintext highlighter-rouge">neutral(c,n[,sn])</code> : specifies the duration in microseconds of a neutral pulse <code class="language-plaintext highlighter-rouge">n</code> (0..65000 [us]) for the servo connected on channel <code class="language-plaintext highlighter-rouge">c</code></li>
  <li><code class="language-plaintext highlighter-rouge">range(c,r[,sn])</code> : specifies the range <code class="language-plaintext highlighter-rouge">r</code> (0..100%) of the servo connected on channel <code class="language-plaintext highlighter-rouge">c</code></li>
</ul>

<p>The optional <code class="language-plaintext highlighter-rouge">sn</code> parameter specifies either the modules serial number or its logical name (if <code class="language-plaintext highlighter-rouge">sn</code> is not given, the first module found is addressed).</p>

<p>Please consult the <a href="https://www.yoctopuce.com/EN/products/yocto-servo/doc/SERVORC1.usermanual.html">Yocto-Servo Userâs guide</a> for further information on this API.</p>

:ET